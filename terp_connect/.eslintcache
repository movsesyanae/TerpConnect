[{"/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/index.js":"1","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/MainPage.js":"2","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/CreateRouter.js":"3","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/NewSignUpSignIn.js":"4","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/Verification.js":"5","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/textingComponents/HomePage.js":"6","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/SignUpComponentMobile.js":"7","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/Course_Selector_Component/CourseSelector.js":"8","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/SignInComponentMobile.js":"9","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/SignIn.js":"10","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/Switcheroo.js":"11","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/SignUp.js":"12","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/aws-exports.js":"13","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/graphql/queries.js":"14","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/graphql/mutations.js":"15"},{"size":1184,"mtime":1611659276458,"results":"16","hashOfConfig":"17"},{"size":2080,"mtime":1611659464751,"results":"18","hashOfConfig":"17"},{"size":5237,"mtime":1611663491873,"results":"19","hashOfConfig":"17"},{"size":1163,"mtime":1611660356065,"results":"20","hashOfConfig":"17"},{"size":4423,"mtime":1611665506358,"results":"21","hashOfConfig":"17"},{"size":5052,"mtime":1611368824118,"results":"22","hashOfConfig":"17"},{"size":11841,"mtime":1611665125408,"results":"23","hashOfConfig":"17"},{"size":10916,"mtime":1611661847538,"results":"24","hashOfConfig":"17"},{"size":4350,"mtime":1611663551143,"results":"25","hashOfConfig":"17"},{"size":2894,"mtime":1611662699291,"results":"26","hashOfConfig":"17"},{"size":1621,"mtime":1611662504178,"results":"27","hashOfConfig":"17"},{"size":8650,"mtime":1611654913750,"results":"28","hashOfConfig":"17"},{"size":692,"mtime":1611667752801,"results":"29","hashOfConfig":"17"},{"size":3177,"mtime":1611667752229,"results":"30","hashOfConfig":"17"},{"size":2902,"mtime":1611667752285,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"e2i8oq",{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"35"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"35"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/index.js",["75","76","77","78","79","80","81","82","83","84","85"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NewSignUpSignIn from './SignUp_SignIn_Components/NewSignUpSignIn'\nimport MainPage from './MainPage'\nimport CreateRouter from './CreateRouter';\nimport CourseSelector from './Course_Selector_Component/CourseSelector'\nimport { BrowserRouter as Router, Switch, Route, Redirect, useHistory } from 'react-router-dom';\nimport SignUpComponentMobile from './SignUp_SignIn_Components/SignUpComponentMobile';\nimport VerificationPage from './SignUp_SignIn_Components/Verification';\nimport HomePage from './textingComponents/HomePage'\nimport Amplify, { Auth } from 'aws-amplify';\nimport awsconfig from './aws-exports';\nAmplify.configure(awsconfig);\n\nReactDOM.render(\n  <React.StrictMode>\n\n    {/* <SignUpSliderComponent /> */}\n\n    {/* <SignUpComplete /> */}\n\n     <Router>\n      <CreateRouter />\n    </Router> \n  \n\n    {/* <NewSignUpSignIn/> */}\n\n\n   {/* <VerificationPage /> */}\n\n  {/* <SignUp_SignIn_Component_Mobile/> */}\n\n\t  {/* <CourseSelector /> */}\n\n    {/* <SignUpComponentMobile/> */}\n\n    {/* <MainPage/> */}\n    {/* <HomePage/> */}\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n",["86","87"],"/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/MainPage.js",["88","89","90","91"],"import React, {useEffect, useState} from 'react';\nimport './mainPage.scss'\nimport {Auth, API, graphqlOperation} from 'aws-amplify'\n\n\nconst MainPage = (props) => {\n\n\n    useEffect(() => {\n        checkUser();\n    }, [])\n\n    async function checkUser() {\n        console.log('doing this ');\n        try {\n            await Auth.currentSession();\n        } catch(error) {\n            props.returnObject({nextPage: 'sign-out', message: 'not signed in in main-page', error: error});\n        }\n\n    }\n\n    return(\n\n    <div id='menuOuterScreen'>\n        <div id='areaBox'>\n            <div id='title'>\n                <p>Welcome to Course Connect</p>\n            </div>\n            <div id='text1'>\n                <p>We're still working on the website, but don't worry - you'll be able to talk to your classmates soon (next monday..hopefully..)</p>\n            </div>\n            <div id='text2'>\n                <p>Every week you get paired with one person from each of your classes.<br/>Please update your classes if you have not yet done so</p>\n            </div>\n            <div id = 'btn-and-btn'>\n            <button id='btn1' onClick = {(e) => {props.returnObject({nextPage: 'course-selection'})}}> Update Classes </button>\n            <button id='btn2' onClick = {(e) => {props.returnObject({nextPage: 'sign-out'})}}> Sign Out </button>\n            </div>\n        </div>\n    </div>\n        \n        // <div className = 'main-page' id='mainBox'>\n        //     <h2> Welcome to Course Connect </h2>\n        //     <p> We're still working on the website, but don't worry - you'll be able to talk to your classmates soon</p>\n        //     <div id = 'description'>\n        //         <h4>How it works</h4>\n        //         <p>fgkfdkjgfkgnknsdfk <br />jsdfdsfsfsfsddssdfn</p>\n        //     </div>\n        //     <button onClick = {(e) => {props.returnObject({nextPage: 'course-selection'})}}> Update Classes </button>\n        //     <button onClick = {(e) => {props.returnObject({nextPage: 'sign-out'})}}> Sign Out </button>\n        // </div>\n    );\n\n}\n\nexport default MainPage;","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/CreateRouter.js",["92"],"import React, {useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect, useHistory } from 'react-router-dom';\n\nimport SignUpPackage from './SignUp_SignIn_Components/NewSignUpSignIn';\nimport SignUpComponentMobile from './SignUp_SignIn_Components/SignUpComponentMobile';\nimport SignInComponentMobile from './SignUp_SignIn_Components/SignInComponentMobile';\nimport CourseSelector from './Course_Selector_Component/CourseSelector';\nimport Verification from './SignUp_SignIn_Components/Verification';\nimport {isMobile} from 'react-device-detect';\nimport MainPage from './MainPage';\nimport { Auth } from 'aws-amplify';\n\n\n\nconst CreateRouter = () => {\n\n    const [currentPage, setCurrentPage] = useState('');\n    // const [user, setUser] = useState(null);\n    const [verified, setVerified] = useState(false);\n    const [email, setEmail] = useState(null);\n    const [password, setPassword] = useState(null);\n    const history = useHistory();\n    \n\n    useEffect(() => {\n        checkUser();\n    }, [])\n\n    async function checkUser() {\n        console.log('doing this ');\n        try {\n            // const x = await Auth.currentSession();\n            // console.log('well damn', x);\n            const user = await Auth.currentAuthenticatedUser();\n            console.log('user:', user);\n            console.log(user['attributes']['email']);\n            setVerified(true);\n            setEmail(user['attributes']['email']);\n        } catch(error) {\n            setVerified(false);\n            setEmail(null);\n            setPassword(null);\n            console.log('got an error', error);\n        }\n\n    }\n\n    const handleReturn = (returnObject) => {\n        if (returnObject['nextPage'] === 'confirm-email') {\n            setEmail(returnObject['email']);\n            setPassword(returnObject['password']);\n            setCurrentPage('confirm-email');\n            console.log('this be a good place to be');\n            history.push('/verification');\n        } else if (returnObject['nextPage'] === 'course-selection') {\n            history.push('/courses');\n        } else if (returnObject['nextPage'] === 'home-page') {\n            history.push('/main');\n\n        } else if (returnObject['nextPage'] === 'sign-out') {\n            Auth.signOut();\n            setEmail(null);\n            setVerified(false);\n            setPassword(null);\n            setCurrentPage('');\n            history.push('/');\n        }\n    }\n\n \n\n    return(\n        <div>\n\n            \n            {/* { email ?  \n            <h1>User: {email}</h1> : null\n            }\n             */}\n\n            {/* <Router> */}\n                <Switch>\n                    {/* <Route exact path = '/' render = {() => <SignUpSliderComponent user = {(user) => setUser(user)} verified = {(value) => handleAfterSignIn(value)}  />} />  */}\n                    <Route exact path = '/'> \n                        {/* {isMobile ? <Redirect to = '/sign-up-mobile' /> : <SignUpPackage logIn = {(value) => handleLogIn(value)} />} */}\n                        {isMobile ? <Redirect to = '/sign-up-mobile' /> : <SignUpPackage returnObject = {handleReturn} updateVerified = {(value) => setVerified(value)} />}\n                    </Route>\n                    \n                    {/* <Route exact path = '/courses' render = {() => <CourseSelector nextPage = {(value) => handleNextPage(value)} user = {user}/>}/> */}\n                    <Route exact path = '/courses' render = { () => (\n                        <CourseSelector returnObject = {handleReturn} />\n                    )} /> \n                        {/* <CourseSelector email = {email} returnObject = {handleReturn} /> */}\n                    {/* </Route> */}\n                    \n                    <Route exact path = '/verification'> \n                        {email && password && !verified && currentPage === 'confirm-email' ? <Verification email = {email} password = {password} returnObject = {handleReturn} /> : <Redirect to = '/' /> }\n                    </Route>\n\n                    <Route exact path = '/sign-up-mobile'> \n                        {/* {user ? <Verification /> : <h1>damn</h1>} */}\n                        {/* {!isMobile ? <Redirect to = '/' /> : <SignUpComponentMobile logIn = {(value) => handleLogIn(value)} user = {(user) => handleLogIn(user)}  />} */}\n                        {!isMobile ? <Redirect to = '/' /> : <SignUpComponentMobile returnObject = {handleReturn}/>}\n                    </Route>\n                    \n                    <Route exact path = '/sign-in-mobile'> \n                        {/* {!isMobile ? <Redirect to = '/' /> : <SignInComponentMobile logIn = {(value) => handleLogIn(value)} user = {(user) => handleLogIn(user)}  />} */}\n                        {!isMobile ? <Redirect to = '/' /> : <SignInComponentMobile returnObject = {handleReturn}/>}\n                    </Route>\n\n                    <Route exact path = '/main'>\n                        {/* {user === null ? <Redirect to = '/' /> : <MainPage returnObject = {handleReturn} />} */}\n                        <MainPage returnObject = {handleReturn} />\n                    </Route>\n                </Switch>\n            {/* </Router> */}\n        </div>\n    );\n}\n\nexport default CreateRouter;","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/NewSignUpSignIn.js",["93","94","95","96","97","98","99","100","101","102"],"import {useState, useEffect, useRef, useImperativeHandle} from 'react'\nimport './newSignUpIn.scss';\nimport { Auth } from 'aws-amplify';\nimport SignUp from './SignUp'\nimport SignIn from './SignIn'\nimport Switcheroo from './Switcheroo'\n\n\nconst NewSignUpSignIn = (props) => {\n    const [needsConfirm, setNeedsConfirm] = useState(false);\n    const [authCode, setAuthCode] = useState('');\n    const [backUpEmail, setBackUpEmail] = useState('');\n    const [message, setMessage] = useState('');\n\n\n    \n\n    const MessageBox = () => {\n        return (\n            <div id='entry-alert' >\n                <ref className=\"closebtn\" onClick = {(e) => setMessage('')}>&times;</ref>\n                {message}\n            </div> \n        );\n    }\n\n    return(\n        <div id = \"newOuterBox\">\n            \n            <SignUp returnObject = {(value) => props.returnObject(value)} message = {(value) => setMessage(value)} />\n            <SignIn returnObject = {(value) => props.returnObject(value)} message = {(value) => setMessage(value)} />\n            <Switcheroo/>\n            {message !== '' ? <MessageBox /> : null}\n        </div>\n    );\n\n}\nexport default NewSignUpSignIn;","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/Verification.js",["103","104","105","106","107","108","109","110","111","112"],"import React, {useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect, useHistory } from 'react-router-dom';\nimport './VerificationPageStyle.scss';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport * as mutations from '../graphql/mutations'\n\nconst Verification = (props) => {\n    const [code, setCode] = useState('');\n\n    useEffect(() => {\n        checkUser();\n    }, [])\n\n    async function checkUser() {\n        console.log('doing this ');\n        try {\n            // const x = await Auth.currentSession();\n            // console.log('well damn', x);\n            const user = await Auth.currentAuthenticatedUser();\n            console.log('already verified in verification page', user['attributes']['email']);\n            props.returnObject({nextPage: 'sign-out', message: 'already verified in email confirmation page'});            \n        } catch(error) {\n        }\n\n    }\n\n    const createUser = async() => {\n        \n    \n    }\n\n    async function handleSubmit(e) {\n\n        try {\n            // confirm the email address\n            await Auth.confirmSignUp(props.email, code);\n            \n            // sign in user\n            let userSignedIn = await Auth.signIn(props.email, props.password);\n            console.log(userSignedIn);\n            \n            // get user's information\n            const currentUserInfo = await Auth.currentUserInfo()\n            const email = currentUserInfo.attributes['email']\n\n            const name = currentUserInfo.attributes['custom:name'];\n            const gender = currentUserInfo.attributes['custom:gender'];\n            const bio = currentUserInfo.attributes['custom:bio'];\n            \n            var lookingForList = [];\n            if (currentUserInfo.attributes['custom:lookingForSB'] == 'true'){\n                lookingForList.push('Study Buddy');\n            }\n            if (currentUserInfo.attributes['custom:lookingForF'] == 'true'){\n                lookingForList.push('Friend');\n            }\n            if (currentUserInfo.attributes['custom:lookingForSF'] == 'true'){\n                lookingForList.push('Friend ;)');\n            }\n            let x = {name, email, gender, bio, lookingForList}\n\n            console.log(x);\n\n            // push the users information to dynamodb with graphql\n            let user = {id: email, bio: bio, courseList: [], gender: gender, lookingForList: lookingForList, name: name, matches: [] }\n            await API.graphql(graphqlOperation(mutations.createUser, { input: user }))\n            console.log('item created!')\n            \n\n\n            // go back to router with next page\n            props.returnObject({\n                nextPage: 'home-page'\n            });\n\n\n         \n\n\n\n\n        } catch (error) {\n            console.log('in verification', error);\n            props.returnObject({\n                nextPage: 'sign-out',\n                message: 'something went wrong during email verification',\n                error: error\n            });\n        }\n\n    }\n\n    return(\n        <div id='outerScreen'>\n                <div id='areaBox'>\n                    <div id='title'>\n                        <p>Please Verify</p>\n                    </div>\n                    <div id='text'>\n                        <p>Please check your umd email for <br/> an email from us containing your security code</p>\n                    </div>\n                    <div id = 'input-and-submit'>\n                        <input type = 'number' pattern = '\\d*' placeholder = 'code' value = {code} onChange = {(e) => setCode(e.target.value)}/>\n                        <button type = 'submit' onClick = {(e) => handleSubmit(e)} >Submit Code</button>\n                    </div>\n                </div>\n            </div>\n        // <body >\n        //     <div className = 'verification-page'>\n        //         <h3> We need to verify your email </h3>\n        //         <h4> Please check your umd email to for an email from us containing your security code </h4>\n        //         <div className = 'input-and-submit'>\n        //             <input type = 'number' pattern = '\\d*' placeholder = 'code' value = {code} onChange = {(e) => setCode(e.target.value)}/>\n        //             <button type = 'submit' onClick = {(e) => handleSubmit(e)} >Submit Code</button>\n        //         </div>\n        //     </div>\n        // </body>\n    );\n\n}\n\nexport default Verification;","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/textingComponents/HomePage.js",["113","114","115","116","117","118","119","120","121"],"import React, {useState, useEffect} from 'react';\nimport './homePage.scss'\nimport axios from 'axios'\n\nconst HomePage = () => {\n    const [dataFile, setDataFile] = useState({});\n    const [textList, setTextList] = useState([]);\n    const [currentUser, setCurrentUser] = useState(4);\n    const [currentConvo, setCurrentConvo] = useState(\"323\");\n    const [rerun, setRerun] = useState(0);\n\n    function textHandler (event) {\n        if(event.key === 'Enter' && !(event.shiftKey)){\n            event.preventDefault();\n            console.log(event);\n            event.target.value='';\n            // alert('deez nuts')\n        }\n    }\n\n     function loadTexts() {\n        //will have to change when connected to the server\n        // fetch('../grace.json').then(response => response.json()).then(data => {console.log('attempting to display JSON');console.log(data)});\n        \n        // var textData = require('../grace.json');\n        // textData = textData.parse(textData);\n        // console.log(textData);\n        // setTextList(textData.texts);\n        // console.log(textList);\n        for(let convo in dataFile) {\n            if(dataFile[convo][\"convoId\"] == currentConvo) {\n                setTextList(dataFile[convo][\"texts\"]);\n            }\n        }\n    }\n\n    const DisplayMessages = () => {\n        if(textList.length > 0){\n            return (\n                <div id='messageArea'>\n                    <div id ='innerMessageArea'>\n                    {textList.map((text,index) => <DisplayMessage number={index} key = {index}/>)}\n                    </div>\n                </div>\n            );\n        } else {\n            return <></>\n        }\n    }\n\n    const DisplayMessage = (props) => {\n        if(textList[props.number].from == currentUser)\n        {\n            return (\n                <div id='messageBoxRec'>\n                    <p>{textList[props.number].message}</p>\n                </div>);\n        } else {\n            return (\n                <div id='messageBoxSend'>\n                    <p>{textList[props.number].message}</p>\n                </div>);\n        }\n        \n    }\n\n    function contactClickHandler (obj) {\n        console.log(\"attempting to switch texts from: \" + obj[\"convoId\"]);\n        setCurrentConvo(obj[\"convoId\"]);\n        \n    }\n\n    const DisplayContacts = () => {\n        \n        console.log(dataFile);\n        if(dataFile.length > 0) {\n            console.log('attempting to return')\n\n            let arr = dataFile.map((obj,index) => <a href=\"#\" onClick={(e) => {e.preventDefault();contactClickHandler(obj)}}><ContactBox focus={obj} key={index} /> </a>);\n            arr[0] = <a href=\"#\" onClick={(e) => {e.preventDefault();contactClickHandler(dataFile[0])}}><div id='contactBoxFirst'><p>{dataFile[0][\"convoId\"]}</p></div></a>\n            arr[arr.length-1] = <a href=\"#\" onClick={(e) => {e.preventDefault();contactClickHandler(dataFile[dataFile.length - 1])}}><div id='contactBoxLast'><p>{dataFile[dataFile.length - 1][\"convoId\"]}</p></div></a>\n\n           \n\n            return( \n                <div id='overFlowBox'>\n                <div id='innerChatSelectBox'>\n                {\n                // dataFile.map((obj,index) => <a href=\"#\" onClick={(e) => {e.preventDefault();contactClickHandler(obj)}}><ContactBox focus={obj} key={index} /> </a>)\n                arr\n                }\n                </div>\n                </div>\n            );\n        } else {\n            return <></>\n        }\n    }\n    \n    const ContactBox = (props) => {\n        console.log(props.focus);\n        return (\n            <div id='contactBox'>\n                <p>{props.focus[\"convoId\"]}</p>\n            </div>\n        )\n    }\n\n    const ContactInfoBox = () => {\n        return(\n            <div id = 'contactInfoBox'>\n                <div><p>Name: </p></div>\n                <div><p>Shared courses: </p></div>\n                <div><p>Looking for: </p></div>\n                <div><p>Bio: </p></div>\n                <div><p>Gender: </p></div>\n                \n            </div>\n        )\n    }\n    \n    const fetchData = async () => {\n        const result = await axios.get('grace.json');\n        const data = await result.data;\n        \n        return data;\n        \n    }\n    \n    useEffect(async () => {\n        \n       let data = await fetchData();\n       setDataFile(data);\n       loadTexts();\n\n       if(rerun == 0) {\n           setRerun(1);\n       }\n    },[rerun,currentConvo])\n\n\n\n    return (\n        <div id='outerHomePage'>\n            <div id='upperContent'>\n                <h1>Terp Connect</h1>\n            </div>\n            <div id = 'chatSelectBox'>\n                <DisplayContacts/>\n                <ContactInfoBox/>\n            </div>\n\n            <div id = 'chatBox'>\n                <DisplayMessages />\n                <div id='writingBox'>\n                        <textarea placeholder = 'Send a message!' onKeyPress = {(event) => {textHandler(event);}}>\n                        </textarea>\n                </div>\n\n            </div>\n        </div>\n    ); \n}\n\nexport default HomePage;","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/SignUpComponentMobile.js",["122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"import {useState,useEffect,useRef} from 'react'\nimport SignIn from './SignIn'\nimport { Auth } from 'aws-amplify';\nimport Filter from 'bad-words';\n\nimport './SignInStyleMobile.scss'\nimport SignUp from './SignUp'\nimport { BrowserRouter as Router, Switch, Route, Redirect, useHistory, Link } from 'react-router-dom';\n\nconst SignUpComponentMobile = (props) => {\n\tconst filter = new Filter();\n\tconst [bio, setBio] = useState('');\n\tconst [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [male, setMale] = useState(true);\n    const [female, setFemale] = useState(false);\n\tconst [other, setOther] = useState(false);\n\tconst [gender,setGender] = useState(0);\n\tconst [lookingFor,setLookingFor] = useState([]);\n    const [nonBinary, setNonBinary] = useState('');\n\tconst [signUpFailMessage, setSignUpFailMessage] = useState('');\n\tconst whereWeAt = useRef(document.getElementById('name'));\n\n\tuseEffect(() => {window.scrollTo(0,0);},[]);\n\n\tuseEffect(() => {whereWeAt.current.focus()},[nonBinary]);\n\n\n\tfunction genderHandler (eventValue) {\n\t\tsetGender(eventValue);\n\t\tswitch(eventValue) {\n\t\t\tcase '0':\n\t\t\t\tsetMale(true); \n\t\t\t\tsetFemale(false); \n\t\t\t\tsetOther(false);\n\t\t\t\tbreak;\n\t\t\tcase '1':\n\t\t\t\tsetMale(false); \n\t\t\t\tsetFemale(true); \n\t\t\t\tsetOther(false);\n\t\t\t\tbreak;\n\t\t\tcase '2':\n\t\t\t\tsetMale(false); \n\t\t\t\tsetFemale(false); \n\t\t\t\tsetOther(true);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst NonBinary = () => {\n        if (gender == 2) {\n            return (\n                    <div className=\"entry-mobile grid-unitx\">\n                    {/* <label htmlFor = \"nonBinary\"> Confirm Gender : </label> */}\n                    <input \n                        className=\"entry-mobile\"\n                        type = 'text' \n                       \n                        key = 'nonBinary'\n                        name = 'nonBinary'\n                        placeholder = 'specify gender' \n                        ref = {whereWeAt}\n                        value = {nonBinary} \n                        onChange = {(e) => {setNonBinary(e.target.value); }} \n                    /> \n                </div>  \n                );\n        } else {\n            return (<></>);\n        }\n\t}\n\t\n\tconst ErrorPopUp = () => {\n\t\tif(signUpFailMessage !== '') {\n\t\t\treturn (\n\t\t\t\t// <div class = 'entry-mobile' id='errorBox'>\n\t\t\t\t// \t<p>{signUpFailMessage}</p>\n\t\t\t\t// </div>\n\n\t\t\t\t<div className=\"alert\" ref={whereWeAt} id='alert-mobile'>\n                <ref className=\"closebtn\" onClick = {() => {setSignUpFailMessage(''); window.scrollTo(0,0);}}>&times;</ref>\n                {signUpFailMessage}\n            </div> \n\t\t\t);\n\t\t} else {\n\t\t\treturn (<></>);\n\t\t}\n\t}\n\t\n\tasync function submitHandler (e) {\n        e.preventDefault();\n\n        let stringInputs = [name,email,password,confirmPassword,nonBinary];\n\n        if(bio == '' || name == '' || email == '' || password == '' || confirmPassword == '' ||  lookingFor.length === 0 || (!male && !female && !other) || (other && nonBinary == '')) {\n\t\t\t// props.failMessage('You have not selected all fields');\n\t\t\tsetSignUpFailMessage('Please complete all fields');\n            return;\n\t\t}\n\t\t\n\n        for(let x in stringInputs) { //injection prevention\n            console.log(stringInputs[x]);\n            if(stringInputs[x].includes('\\'') || stringInputs[x].includes('<') || stringInputs[x].includes('>')) {\n                setSignUpFailMessage('nice try bru');\n                // props.failMessage('You may not include symbols such as \\' or < >');\n                return;\n            }\n        }\n\n\t\tif(!(password == confirmPassword)) { //FIX: passwords showing up in console\n            setSignUpFailMessage('Please make sure your passwords match');\n            // props.failMessage('Passwords must match!');\n            return;\n        }\n\n        if(!email.endsWith('@umd.edu')) {\n            setSignUpFailMessage('Please use your @umd.edu email');\n            // props.failMessage('Please use a @umd.edu email');\n            return;\n\t\t}\n\t\tif (filter.isProfane(name)) {\n            setSignUpFailMessage('Please obstain from profanity in your name');\n            return;\n\t\t}\n\t\t\n\t\tif (password.length < 8) {\n            setSignUpFailMessage('Your password must contain at least 8 characters');\n            return;\n        }\n\t\t\n\t\tif (filter.isProfane(bio)) {\n            setSignUpFailMessage('Please obstain from profanity in your bio');\n            return;\n        }\n\n        \n\t\t  // Do server call here\n\t\ttry {\n\t\t\tvar gender = '';\n\t\t\tif (female) {\n\t\t\t\tgender = 'Female';\n\t\t\t} else if (male) {\n\t\t\t\tgender = 'Male';\n\t\t\t} else {\n\t\t\t\tgender = nonBinary;\n\t\t\t}\n\n\t\t\tvar lookingForSB = 'false';\n\t\t\tvar lookingForF = 'false';\n\t\t\tvar lookingForSF = 'false';\n\t\t\tif (lookingFor.includes(0)){\n\t\t\t\tlookingForSB = 'true';\n\t\t\t}\n\t\t\tif (lookingFor.includes(1)){\n\t\t\t\tlookingForF = 'true';\n\t\t\t}\n\t\t\tif (lookingFor.includes(2)){\n\t\t\t\tlookingForSF = 'true';\n\t\t\t}\n\n\t\t\tconst { user } = await Auth.signUp({\n\t\t\t\tusername: email,\n\t\t\t\tpassword: password,\n\t\t\t\tattributes: {\n\t\t\t\t\t\n\t\t\t\t\temail: email,\n\t\t\t\t\t// other custom attributes \n\t\t\t\t\t'custom:name': name,\n\t\t\t\t\t'custom:gender': gender,\n\t\t\t\t\t'custom:lookingForSB': lookingForSB,\n\t\t\t\t\t'custom:lookingForF': lookingForF,\n\t\t\t\t\t'custom:lookingForSF': lookingForSF,\n\t\t\t\t\t'custom:bio': bio,\n\n\t\t\t\t}\n\t\t\t});\n\t\t\tconsole.log(user);\n\t\t\tprops.returnObject({\n\t\t\t\tnextPage: 'confirm-email',\n\t\t\t\temail: email,\n\t\t\t\tpassword: password\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log('error signing up:', error);\n\t\t}\n\n\n\n  \n    }\n\n    const createUser = () => {\n        const crypto = require('crypto'); \n        const hash = crypto.createHash('sha256');\n        const id = hash.update('email', 'binary').digest('hex');\n        const passHash = hash.update('password', 'binary').digest('hex');\n        // const user = {id: id, passHash: passHash};\n        const user = {id: email, passHash: password};\n        return user;\n    }\n\n    const createRequestJSON = () => {\n        const user = createUser(); \n\n        // get gender\n        let gender = '';\n        if (male) gender = 'male';\n        else if (female) gender = 'female';\n        else gender = nonBinary;\n\n    \n\n\n\n\n        const grace = {user: user, email: email, name: name, gender: gender, lookingForList: lookingFor, verified: false, action: 0};\n\t\tconsole.log(grace);\n\t\treturn grace;\n        \n    }\n\tconst handleMult = (e) => {\n\n\t\tvar value = [];\n\t\tvar options = e.target.options;\n\t\tfor (var i = 0, l = options.length; i < l; i++) {\n\t\t\tif (options[i].selected) {\n\t\t\tvalue.push(parseInt(options[i].value));\n\t\t\t}\n\t\t}\n\t\tsetLookingFor(value);\n\n\t}\n\t\n\n    return(\n\t\t\t\n\t\t\t<div className = 'entry-mobile page-container'>\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit1'>\n\t\t\t\t\t\t<h1 id='cCLabel'className = 'entry-mobile course-connect'>Course Connect</h1>\n\t\t\t\t\t\t<p>Already have an account? <Link to = '/sign-in-mobile' id =\"signInLink\">Sign in</Link></p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<ErrorPopUp/>\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit2'>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\tclassName=\"entry-mobile\"\n\t\t\t\t\t\ttype = 'text' \n\t\t\t\t\t\tid = 'name' \n\t\t\t\t\t\tname = 'name'\n\t\t\t\t\t\tplaceholder = 'name' \n\t\t\t\t\t\tref = {whereWeAt}\n\t\t\t\t\t\tvalue = {name} \n\t\t\t\t\t\tonChange = { (e) => setName(e.target.value) } \n\t\t\t\t\t\t/> \n\t\t\t\t\t</div> \n\t\t\t\t\t\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit3'>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\tclassName=\"entry-mobile\"\n\t\t\t\t\t\ttype = 'text' \n\t\t\t\t\t\tid = 'email' \n\t\t\t\t\t\tname = 'email'\n\t\t\t\t\t\tplaceholder = 'email' \n\t\t\t\t\t\tvalue = {email} \n\t\t\t\t\t\tonChange = { (e) => setEmail(e.target.value) } \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit4'>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\tclassName=\"entry-mobile\"\n\t\t\t\t\t\ttype = 'password' \n\t\t\t\t\t\tid = 'password' \n\t\t\t\t\t\tname = 'password'\n\t\t\t\t\t\tplaceholder = \"password\" \n\t\t\t\t\t\tvalue = {password} \n\t\t\t\t\t\tonChange = {(e) => setPassword(e.target.value)} \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit5'>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\tclassName=\"entry-mobile\"\n\t\t\t\t\t\ttype = 'password' \n\t\t\t\t\t\tplaceholder = 'confirm password'\n\t\t\t\t\t\tid = 'confirm password' \n\t\t\t\t\t\tname = 'confirm password' \n\t\t\t\t\t\tvalue = {confirmPassword} \n\t\t\t\t\t\tonChange = {(e) => setConfirmPassword(e.target.value)} \n                \t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit6'>\n\t\t\t\t\t\t<label className=\"entry-mobile genderLabel\" htmlFor = \"gender\" > Gender: </label>\n\t\t\t\t\t\t{/* <div className=\"entry-mobile gender-buttons-mobile\">\n\t\t\t\t\t\t\t<div className=\"entry-page\" id = \"gb1-button\">\n\t\t\t\t\t\t\t\t<input className=\"entry-page\" type = 'radio' onClick = {() => {setMale(true); setFemale(false); setOther(false);}} id = 'male' name = 'gender' value = '0' />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div id='gb1-label'>\n\t\t\t\t\t\t\t\t<label className=\"gb1-label\" htmlFor = 'male'> Male </label>\n\t\t\t\t\t\t\t</div>\n\n                        \t<div className=\"entry-page\" id = \"gb2-button\">\n                            \t<input className=\"entry-page\" type = 'radio' onClick = {() => {setMale(false); setFemale(true); setOther(false);}} id = 'female' name = 'gender' value = '1' />\n                            </div>\n\n\t\t\t\t\t\t\t<div id='gb2-label'>\n\t\t\t\t\t\t\t<label className=\"entry-page\" htmlFor = 'female'> Female </label>\n                        \t</div>\n\n                        \t<div className=\"entry-page\" id = \"gb3-button\">\n                            <input className=\"entry-page\" type = 'radio' onClick = {() => {setMale(false); setFemale(false); setOther(true); }} id = 'other' name = 'gender' value = '2' />\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div id = 'gb3-label'>\n                            <label className=\"entry-page\" htmlFor = 'other'> Other </label>\n                        \t</div>\n\n                    \t</div> */}\n\t\t\t\t\t\t<select id='genderSelector' className = 'entry-mobile custom-select' name='genderSelector' value={gender} onChange = {(e) => {genderHandler(e.target.value)}} >\n\t\t\t\t\t\t\t<option value='0'> Male </option>\n\t\t\t\t\t\t\t<option value='1' > Female </option>\n\t\t\t\t\t\t\t<option value='2' > Other </option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<NonBinary/>\n\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit7'>\n\t\t\t\t\t\t<label className=\"entry-mobile\"> I'm looking for a... </label>\n\t\t\t\t\t\t{/* <div className = 'entry-mobile looking-for-buttons-mobile'>\n\t\t\t\t\t\t\t\t<div  id='lfb1'>\n\t\t\t\t\t\t\t\t<input className=\"entry-mobile\" id='innerLfb1'  type = 'checkbox' onClick = {() => {setStudyBuddy( !studyBuddy)}}  name = 'study buddy' value = '0'/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<label className=\"entry-mobile\" id='lfl1' htmlFor = 'study buddy' >Study buddy</label> \n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div id='lfb2'>\n\t\t\t\t\t\t\t\t<input className=\"entry-mobile\"  type = 'checkbox' onClick = {() => {setFriend(!friend)}} name = 'friend' value = '1'/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<label className=\"entry-mobile\" id='lfl2' htmlFor = 'friend'>friend</label> \n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div id='lfb3'>\n\t\t\t\t\t\t\t\t<input className=\"entry-mobile\" type = 'checkbox' onClick = {() => {setSex(!sex)}}  name = 'sex' value = '2'/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<label className=\"entry-mobile\" id = 'lfl3' htmlFor = 'sex'>friend ;)</label>\n\t\t\t\t\t\t</div> */}\n\t\t\t\t\t\t<select id='lookingForSelector'  onChange = {(e) => handleMult(e)} multiple>\n\t\t\t\t\t\t\t<option value={0}> Study Buddy </option>\n\t\t\t\t\t\t\t<option value={1} > Friend </option>\n\t\t\t\t\t\t\t<option value={2} > Friend ;) </option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit9'>\n\t\t\t\t\t\t<label>Bio</label>\n                \t\t<textarea maxLength = '256' placeholder = 'tell your classmates something about yourself ;)' value={bio} onChange = { (e) => setBio(e.target.value)}/>\n\t\t\t\t\t</div>\n\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit8'>\n\t\t\t\t\t\t<button className=\"entry-mobile\" type = 'submit' onClick = { (e) => {submitHandler(e);} }> Sign Up </button>\n\t\t\t\t\t</div>\n{/* \n\t\t\t\t\t<div className = 'entry-mobile grid-footer'>\n\t\t\t\t\t</div> */}\n\t\t\t</div> \n    );\n}\n\nexport default SignUpComponentMobile;","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/Course_Selector_Component/CourseSelector.js",["140","141","142","143","144"],"import React, {useState, useEffect} from 'react';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport './CourseSelectorStyle.scss'\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport * as mutations from '../graphql/mutations'\nimport * as queries from '../graphql/queries'\n\n\n\n\n\n\n\nconst CourseSelector = (props) => {\n\n    const [course, setCourse] = useState({id: '', prof: ''});\n    const [valid, setValid] = useState(false);\n    const [courseList, setCourseList] = useState([]);\n    const [errorCode, setErrorCode] = useState(0);\n    const [email, setEmail] = useState(null);\n    // 0 - all works well \n    // 1 - course isn't valid \n    // 2 - professor isn't selected\n    // 3 - max number of courses already added\n\n\n    useEffect(() => {\n        checkUser();\n    }, [])\n\n    async function checkUser() {\n        console.log('doing this ');\n        try {\n            // const x = await Auth.currentSession();\n            // console.log('well damn', x);\n\n            const currentUserInfo = await Auth.currentUserInfo()\n            setEmail(currentUserInfo.attributes['email']);\n\n        } catch(error) {\n            setEmail(null);\n            console.log('got an error in course-selector', error);\n            props.returnObject({nextPage: 'sign-out', message: 'authorization failure in course selector', error: error});\n        }\n\n    }\n\n\n    const updateProfessor = (e) => {\n        console.log(e.target.value);\n        setCourse({ ...course, prof: e.target.value});\n    }\n\n    const updateCourseList = () => {\n\n        const newCourse = {id: course.id.toUpperCase(), prof: course.prof};\n        setCourseList([...courseList, newCourse]);\n        \n        \n    }\n\n    const removeCourse = (tempCourse) => {\n        const index = courseList.indexOf(tempCourse);\n        let newData = courseList.filter((courseInList) => courseInList !== tempCourse );\n        setCourseList(newData);\n    }\n\n    const ShowCourseList = () => {\n        return (\n            <fieldset className = 'course-selection-page course-display-package' id = 'course-list'>\n                <legend> Your Classes </legend>\n                <ul className = 'course-display-package'>\n                    <h3 className = 'course-list-element' id>\n                       <div id='course-label'> Course ID </div>\n                       <div> Professor</div>  \n                    </h3>\n                    {courseList.map( (tempCourse) => {\n                        return (\n                            <li className = 'course-list-element'> \n                                <div id = 'course-list-element'>\n                                    <div>\n                                        {tempCourse.id} \n                                    </div>\n                                    <div id='profSpacing'>\n                                        {tempCourse.prof} \n                                    </div>\n                                    <div>\n                                        <button className = 'remove-class-btn' onClick = {(e) => removeCourse(tempCourse)}>&times;</button> \n                                    </div>\n                                </div> \n\n                            </li>);\n                    })} \n\n                </ul>\n            </fieldset>\n        );\n    }\n\n    const getProfessorList = (classId) => {\n        var json = require('./new_updated_classes.json');\n        return(json[classId.toUpperCase()]);\n    }\n\n    const CreateProfessorDropdown = () => {\n        const profList = getProfessorList(course.id);\n        return (\n            <div className = 'dropdown-package'> \n                <label htmlFor = 'profSelector' id = 'professor-label'> Professor:</label>\n\n                <div id='dropdownBox'>\n                <select name='professors' value = {course.prof}  id='professor-dropdown2' onChange = {(e) => {updateProfessor(e)}}>\n                    <option  value = '' disabled selected>Please choose one</option>\n\n                    {\n                        \n                        profList.map( (profName) => {\n                            return(<option value={profName}>{profName}</option>);\n                        })\n                    }\n\n                </select>\n                </div>\n\n\n\n\n            </div>\n        );\n    }\n\n\n    const ResetProfessor = () => {\n        return(null);\n    }\n\n\n    const addCourse = (e) => {\n        // 0 - all works well \n        // 1 - max number of courses already added\n        // 2 - course isn't valid \n        // 3 - professor isn't selected\n        // 4 - course is already added\n\n        if (courseList.length >= 7) {\n            setErrorCode(1);\n        } else if (!valid) {\n            setErrorCode(2);\n        } else if (course.prof === '') {\n            setErrorCode(3);\n        } else if (courseList.filter((element) => element.id === course.id.toUpperCase()).length > 0) {\n            setErrorCode(4);\n        }\n        else {\n            setErrorCode(0);\n            updateCourseList();\n        }\n\n    }\n\n    const DisplayErrorMessage = () => {\n        var errorMessage = '';\n        switch (errorCode) {\n            case 1:\n                errorMessage = 'You have already the maximum amount of courses'\n                break;\n\n            case 2:\n                errorMessage = 'Please enter a valid UMD Course ID'\n                break;\n            \n            case 3:\n                errorMessage = 'Please select your professor'\n                break;\n            \n            case 4:\n                errorMessage = 'You have already added this course'\n                break;\n        \n            default:\n                break;\n        }\n\n        return (\n            <div className=\"alert\">\n                <ref className=\"closebtn\" onClick = {(e) => setErrorCode(0)}>&times;</ref>\n                {errorMessage}\n            </div> \n        )\n\n    }\n\n    const checkCourseValid = (courseId) => {\n        var json = require('./classes.json'); //(with path)\n        // var returnArray = ['Damn Shadi'];\n        // const course_id = 'CMSC352';\n        // if(json.hasOwnProperty(course_id)){\n        //     returnArray = json[course_id]\n        // }\n        if (json.hasOwnProperty(courseId.toUpperCase())) {\n            setValid(true);\n        } else { \n            setValid(false);\n        }\n\n    }\n\n    const handleSubmit = async() => {\n        //do server call\n\n        try {\n            // convert course list to string list\n            let newCourseList = [];\n            var i;\n            for( i = 0; i < courseList.length; i++){\n                let cName = courseList[i].id + ' ' + courseList[i].prof;\n                newCourseList.push(cName);\n            }\n            \n            // remove student from previous set of courses\n            var user = await API.graphql(graphqlOperation(queries.getUser, {id: email}));\n            var pastCourses = user.data.getUser.courseList;\n            for(i = 0; i < pastCourses.length; i++){\n                let course = await API.graphql(graphqlOperation(queries.getCourse, {id: pastCourses[i]}));\n                if (course.data.getCourse != null) {\n                    let studentList = course.data.getCourse.studentList;\n                    studentList = studentList.filter(item => item !== email);\n                    let courseUpdate = {id: pastCourses[i], studentList: studentList};\n                    await API.graphql(graphqlOperation(mutations.updateCourse, { input: courseUpdate}));\n                }\n            }\n\n            // add student to new set of courses\n            for(i = 0; i < newCourseList.length; i++) {\n                let course = await API.graphql(graphqlOperation(queries.getCourse, {id: newCourseList[i]}));\n                if (course.data.getCourse == null) {\n                    let createCourseInput = {id: newCourseList[i], studentList: [email]};\n                    await API.graphql(graphqlOperation(mutations.createCourse, {input: createCourseInput}));\n                } else {\n                    let studentList = course.data.getCourse.studentList;\n                    studentList = studentList.push(email);\n                    let courseUpdate = {id: newCourseList[i], studentList: studentList};\n                    await API.graphql(graphqlOperation(mutations.updateCourse, { input: courseUpdate}))\n                }\n            }\n            \n            // update student's course list\n            let updateInput = {id: email, courseList: newCourseList}\n            await API.graphql(graphqlOperation(mutations.updateUser, { input: updateInput}))\n            console.log('course list updated');\n    \n            \n    \n            //make next page main page\n            props.returnObject({\n                nextPage: 'home-page'\n            });\n            \n        } catch(err) {\n            console.log('something went wrong: ', err);\n            props.returnObject({\n                nextPage: 'sign-out',\n                message: 'error in course-selection',\n                error: err\n            })\n        }\n    }\n\n\n    return (\n        <body id=\"courseSelectorBody\">\n        <main className = 'course-selection-page'>\n        \n            {courseList.length > 0 ? <ShowCourseList /> : null}\n            <fieldset className = 'course-input-package course-selection-page' id = 'class-selector'>\n                <legend> Add a course </legend>\n                <div className = 'course-inputs'>\n                    \n                    <div className = 'course-id-input'>\n                        <label htmlFor = \"course-id-input\"> Course: </label>\n                        <input \n                            type = \"text\" \n                            id = 'course-id-input' \n                            name = 'course'\n                            className = 'course-selection-page' \n                            value = {course.id}\n                            onChange = {(e) => {\n                                checkCourseValid(e.target.value.toUpperCase().trim()); \n                                setCourse({ id: e.target.value.toUpperCase().trim(), prof: '' });\n                            }\n                            }\n                        /> \n                    </div>\n                    \n                    { valid ? <CreateProfessorDropdown /> : null }\n\n                </div>\n\n                <div>\n                    <button className = 'add-class-btn' type = 'submit' onClick = {(e) => {addCourse();}}> Add Class </button>\n                </div> \n                \n\n            </fieldset>\n\n            <button className = 'add-class-btn' id = 'submit-courses-btn' type = 'submit' onClick = {(e) => {handleSubmit(e);}}> Submit Class List </button>\n            \n            \n            {errorCode !== 0 ? <DisplayErrorMessage /> : null}\n\n            \n\n\n        </main>\n        </body>\n    \n\n    );\n}\n\nexport default CourseSelector;","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/SignInComponentMobile.js",["145","146","147","148","149","150","151","152","153","154","155","156","157","158"],"import {useState,useEffect,useRef} from 'react'\nimport SignIn from './SignIn'\n\nimport './SignInStyleMobile.scss'\nimport SignUp from './SignUp'\nimport { BrowserRouter as Router, Switch, Route, Redirect, useHistory, Link } from 'react-router-dom';\nimport { Auth } from 'aws-amplify';\n\nconst SignUpComponentMobile = (props) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\tconst [signUpFailMessage, setSignUpFailMessage] = useState('');\n\tconst whereWeAt = useRef(document.getElementById('name'));\n\n\n\n\n\t\n\tconst ErrorPopUp = () => {\n\t\tif(signUpFailMessage !== '') {\n\t\t\treturn (\n\t\t\t\t// <div class = 'entry-mobile' id='errorBox'>\n\t\t\t\t// \t<p>{signUpFailMessage}</p>\n\t\t\t\t// </div>\n\n\t\t\t\t<div className=\"alert\" ref={whereWeAt} id='alert-mobile'>\n                <ref className=\"closebtn\" onClick = {() => {setSignUpFailMessage(''); window.scrollTo(0,0);}}>&times;</ref>\n                {signUpFailMessage}\n            </div> \n\t\t\t);\n\t\t} else {\n\t\t\treturn (<></>);\n\t\t}\n\t}\n\t\n\tasync function submitHandler (e) {\n        e.preventDefault();\n\n        let stringInputs = [email,password];\n        let submitPass = true;  //as long as true should succefully submit\n\n        if(email == '' || password == '') {\n\t\t\t// props.failMessage('You have not selected all fields');\n\t\t\tsetSignUpFailMessage('You have not selected all fields');\n            submitPass = false;\n            return;\n\t\t}\n\t\t\n\n        for(let x in stringInputs) { //injection prevention\n            if(stringInputs[x].includes('\\'') || stringInputs[x].includes('<') || stringInputs[x].includes('>')) {\n\t\t\t\tsetSignUpFailMessage('Stop hacking ;)');\n                // props.failMessage('You may not include symbols such as \\' or < >');\n                submitPass = false;\n                return;\n            }\n        }\n\n\n     \n\t\t//check servers return here\n\t\t\n\n\t\ttry {\n            const user = await Auth.signIn(email, password);\n            console.log(user);\n            props.returnObject({\n                nextPage: 'home-page'\n            });\n        } catch (error) {\n            console.log('error signing in', error);\n            if(error['code'] === 'UserNotConfirmedException' ) {\n                //User hasnt verified email\n                Auth.resendSignUp(email);\n\n                props.returnObject({\n                    nextPage: 'confirm-email',\n                    email: email,\n                    password: password\n                });\n            } else {\n                setSignUpFailMessage('Incorrect email or password');\n                return;\n            }\n        }\n\n    \n    }\n\n    const createUser = () => {\n        const crypto = require('crypto'); \n        const hash = crypto.createHash('sha256');\n        const id = hash.update('email', 'binary').digest('hex');\n        const passHash = hash.update('password', 'binary').digest('hex');\n        // const user = {id: id, passHash: passHash};\n        const user = {id: email, passHash: password};\n        return user;\n\n    }\n\n    const createRequestJSON = () => {\n        const user = createUser(); \n        const grace = {user: user, action: 1};\n        console.log(grace);\n        return grace;\n    }\n\t\n\n    return(\n\t\t\t<div className = 'entry-mobile page-container'>\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit1'>\n\t\t\t\t\t\t<h1 id='cCLabel'className = 'entry-mobile course-connect'>Course Connect</h1>\n\t\t\t\t\t\t<p>New User? <Link to = '/sign-up-mobile' id =\"signInLink\">Sign up</Link></p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<ErrorPopUp/>\n\n\t\t\t\t\t \n\t\t\t\t\t\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit3'>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\tclassName=\"entry-mobile\"\n\t\t\t\t\t\ttype = 'text' \n\t\t\t\t\t\tid = 'email' \n\t\t\t\t\t\tname = 'email'\n\t\t\t\t\t\tplaceholder = 'email' \n\t\t\t\t\t\tvalue = {email} \n\t\t\t\t\t\tonChange = { (e) => setEmail(e.target.value) } \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit4'>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\tclassName=\"entry-mobile\"\n\t\t\t\t\t\ttype = 'password' \n\t\t\t\t\t\tid = 'password' \n\t\t\t\t\t\tname = 'password'\n\t\t\t\t\t\tplaceholder = \"password\" \n\t\t\t\t\t\tvalue = {password} \n\t\t\t\t\t\tonChange = {(e) => setPassword(e.target.value)} \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\n\n\t\t\t\t\t\n\n\n\t\t\t\t\t\n\n\t\t\t\t\t<div className = 'entry-mobile grid-unit8'>\n\t\t\t\t\t\t<button className=\"entry-mobile\" type = 'submit' onClick = { (e) => {submitHandler(e);} }> Sign In </button>\n\t\t\t\t\t</div>\n\n\t\t\t</div> \n    );\n}\n\nexport default SignUpComponentMobile;","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/SignIn.js",["159","160"],"import React, { useState, useEffect} from 'react';\nimport './newSignUpIn.scss';\nimport axios from 'axios'\nimport { Auth } from 'aws-amplify';\n\n\n\nconst SignIn = (props) => {\n    const [signUpFields,setSignUpFields] = \n    useState({email:'',password:''});\n    \n    async function handleSignIn(e) {\n        console.log('sign up init');\n        e.preventDefault();\n\n        let inputs = [signUpFields.email, signUpFields.password];\n        var i;\n\n        if(signUpFields.email.length < 1 || signUpFields.password.length < 1){\n            props.message('Please complete all fields');\n            return;\n        }\n\n        for(i = 0; i < inputs.length; i++){\n            if(inputs[i].includes('\\'') || inputs[i].includes('<') || inputs[i].includes('>')) {\n                props.message('nice try bru');\n                return;\n            }\n        }\n\n        \n        try {\n            const user = await Auth.signIn(signUpFields.email, signUpFields.password);\n            console.log(user);\n            props.returnObject({\n                nextPage: 'home-page'\n            });\n        } catch (error) {\n            console.log('error signing in', error);\n            if(error['code'] === 'UserNotConfirmedException' ) {\n                //User hasnt verified email\n                console.log('i want grace');\n                Auth.resendSignUp(signUpFields.email);\n\n                props.returnObject({\n                    nextPage: 'confirm-email',\n                    email: signUpFields.email,\n                    password: signUpFields.password\n                });\n            } else {\n                props.message('Incorrect email or password');\n                return;\n            }\n        }\n        \n    }\n\n    return (\n        <div id = 'newSignInBox'>\n        <div id='height-box'>\n            <div id='Label-field'>\n                <label><h1>Sign In</h1></label>\n            </div>\n\n            <div id='email-field'>\n                <input \n                        type = 'text'  \n                        name = 'email'\n                        placeholder = 'email' \n                        value = {signUpFields.email} \n                        onChange = { (e) => setSignUpFields({...signUpFields,email:e.target.value}) } \n                    /> \n            </div>\n\n            <div id='password-field'>\n                <input \n                        type = 'password'  \n                        name = 'password'\n                        placeholder = 'password' \n                        value = {signUpFields.password} \n                        onChange = { (e) => setSignUpFields({...signUpFields,password:e.target.value}) }\n                    /> \n            </div>\n\n            <div id='submit-field'>\n                <button type = 'submit' onClick = { handleSignIn }> Sign In </button>\n            </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default SignIn;\n","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/Switcheroo.js",["161","162"],"import {useState} from 'react';\nimport {motion} from \"framer-motion\"\nimport './newSignUpIn.scss';\n\nconst Switcheroo = () => {\n    const [titleText,setTitleText] = useState('Welcome to TerpConnect');\n    const [descripText,setDescripText] = useState('Meet people in your classes!');\n    const [btnText,setBtnText] = useState('Sign Up');\n    const [sideA,setSideA] = useState(false);\n\n    const variants = {\n        init: {x: '100%'},\n        left: {x: '0%'},\n        right: {x:'100%'}\n\n        // init: {opacity: 0},\n        // left: {opacity: 0},\n        // right: {opacity:1}\n    }\n\n    function onClickHandler(e) {\n        e.preventDefault();\n        setSideA(!sideA);\n        console.log('clicked btn');\n\n        if(sideA){\n            setBtnText('Sign Up')\n        } else {\n            setBtnText('Sign In')\n        }\n\n    }\n\n    return (\n        <div id='positionBox'>\n            <motion.div id='switchBox'\n            variants = {variants}\n            initial = \"init\"\n            animate = {(sideA) ? \"left\" : \"right\"}\n            transition={{type:'spring',delay:0.1}}\n            >\n                <div id='height-box'>\n                    <div id='title-tag'>\n                        <h1>{titleText}</h1>\n                    </div>\n\n                    <div id='descrip-text'>\n                        <p>{descripText}</p>\n                    </div>\n\n                    <div id='switch-btn'>\n                        <button onClick = {(e) => {onClickHandler(e)}}> {btnText} </button>\n                    </div>\n                </div>\n            </motion.div>\n        </div>\n    );\n}\nexport default Switcheroo;","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/SignUp_SignIn_Components/SignUp.js",["163","164","165"],"import React, { useState, useEffect, useRef} from 'react';\nimport './newSignUpIn.scss';\nimport axios from 'axios'\nimport { Auth } from 'aws-amplify';\nimport Filter from 'bad-words';\n\n\nconst SignUp = (props) => {\n    const filter = new Filter();\n    const [signUpFields,setSignUpFields] = \n    useState({name:'',email:'',password:'',confirmPassword:'',\n    studyBuddy:false,friend:false,sex:false,male:false,\n    female:false,other:false,nonBinary:'',bio:''});\n    const [signUpFailMessage, setSignUpFailMessage] = useState('');\n    const whereWeAt = useRef(document.getElementById('name'));\n\n    useEffect(() => {whereWeAt.current.focus()},[signUpFields.nonBinary]);\n\n    const NonBinary = () => {\n        if(signUpFields.other){\n            return(\n                <div id='nonBinary-field'>\n                    <input \n                        type = 'text'\n                        key = 'nonBinary'  \n                        name = 'nonBinary'\n                        ref = {whereWeAt}\n                        placeholder = 'gender' \n                        maxLength = '256'\n                        value = {signUpFields.nonBinary} \n                        onChange = { (e) => setSignUpFields({...signUpFields,nonBinary:e.target.value}) } \n                    /> \n                    </div>\n            )\n        } else {\n            return(<></>)\n        }\n    }\n\n    async function handleSignUp(e) {\n        e.preventDefault();\n\n        if (signUpFields.name.length < 1 || signUpFields.email.length < 1 || signUpFields.password.length < 1\n            || signUpFields.confirmPassword.length < 1 || signUpFields.bio.length < 1 || \n            (!signUpFields.female && !signUpFields.male && !signUpFields.other) || \n            (signUpFields.other && signUpFields.nonBinary.length < 1) || \n            (!signUpFields.studyBuddy && !signUpFields.friend && !signUpFields.sex)) {\n                props.message('Please complete all fields');\n                return;\n        }\n\n        if (filter.isProfane(signUpFields.name)) {\n            props.message('Please obstain from profanity in your name');\n            return;\n        }\n        \n        if (!signUpFields.email.endsWith('umd.edu')) {\n            props.message('Please use your @umd.edu email');\n            return;\n        }\n        \n        if (signUpFields.password.length < 8) {\n            props.message('Your password must contain at least 8 characters');\n            return;\n        }\n        \n        if (signUpFields.password !== signUpFields.confirmPassword) {\n            props.message('Please make sure your passwords match');\n            return;\n        }\n        \n        if (filter.isProfane(signUpFields.bio)) {\n            props.message('Please obstain from profanity in your bio');\n            return;\n        }\n        \n        let inputs = [signUpFields.name, signUpFields.password, signUpFields.nonBinary, signUpFields.bio, signUpFields.email];\n        var i;\n        for(i = 0; i < inputs.length; i++){\n            if(inputs[i].includes('\\'') || inputs[i].includes('<') || inputs[i].includes('>')) {\n                props.message('nice try bru');\n                return;\n            }\n        }\n        \n        \n        try {\n            var gender = '';\n            if (signUpFields.female) {\n                gender = 'Female';\n            } else if (signUpFields.male) {\n                gender = 'Male';\n            } else {\n                gender = signUpFields.nonBinary;\n            }\n\n            var lookingForSB = 'false';\n            var lookingForF = 'false';\n            var lookingForSF = 'false';\n            if (signUpFields.studyBuddy){\n                lookingForSB = 'true';\n            }\n            if (signUpFields.friend){\n                lookingForF = 'true';\n            }\n            if (signUpFields.sex){\n                lookingForSF = 'true';\n            }\n\n            const { user } = await Auth.signUp({\n                username: signUpFields.email,\n                password: signUpFields.password,\n                attributes: {\n                    \n                    email: signUpFields.email,\n                    // other custom attributes \n                    'custom:name': signUpFields.name,\n                    'custom:gender': gender,\n                    'custom:lookingForSB': lookingForSB,\n                    'custom:lookingForF': lookingForF,\n                    'custom:lookingForSF': lookingForSF,\n                    'custom:bio': signUpFields.bio,\n\n                }\n            });\n            console.log(user);\n            props.returnObject({\n                nextPage: 'confirm-email',\n                email: signUpFields.email,\n                password: signUpFields.password\n            });\n        } catch (error) {\n            console.log('error signing up:', error);\n        }\n    }\n\n    return (\n        <div id = \"newSignUpBox\">\n\n            <div id='Label-field'>\n                <h1>Sign Up</h1>\n            </div>\n\n            <div id='name-field'>\n            <input \n                id='name'\n                ref = {whereWeAt}\n                type = 'text'  \n                name = 'name'\n                placeholder = 'name' \n                maxLength = '256'\n\n                value = {signUpFields.name} \n                onChange = { (e) => setSignUpFields({...signUpFields,name:e.target.value}) }\n            /> \n            </div>\n\n            <div id='email-field'>\n                <input \n                    type = 'text'  \n                    name = 'email'\n                    placeholder = 'email' \n                    value = {signUpFields.email} \n                    onChange = { (e) => setSignUpFields({...signUpFields,email:e.target.value}) }\n                /> \n            </div> \n\n            <div id='password-field'>\n                <input \n                    type = 'password'  \n                    name = 'password'\n                    placeholder = 'password' \n                    value = {signUpFields.password} \n                    onChange = { (e) => setSignUpFields({...signUpFields,password:e.target.value}) }\n                /> \n            </div> \n\n            <div id='confirmPassword-field'>\n                <input \n                    type = 'password'  \n                    name = 'confirm password'\n                    placeholder = 'confirm password' \n                    value = {signUpFields.confirmPassword} \n                    onChange = { (e) => setSignUpFields({...signUpFields,confirmPassword:e.target.value}) }\n                /> \n            </div>\n\n            <div id='gender-field'>\n                <label>Gender</label>\n                <input type = 'radio'  id = 'male-r' name = 'gender' value = '0' onClick = { (e) => setSignUpFields({...signUpFields,male:true,female:false,other:false}) }/>\n                <input type = 'radio'  id = 'female-r' name = 'gender' value = '1' onClick = { (e) => setSignUpFields({...signUpFields,male:false,female:true,other:false}) }/>\n                <input type = 'radio'  id = 'other-r' name = 'gender' value = '2' onClick = { (e) => setSignUpFields({...signUpFields,male:false,female:false,other:true}) }/>\n                <label id= 'male-l'>Male</label>\n                <label id= 'female-l'>Female</label>\n                <label id= 'other-l'>Other</label>\n            </div>\n\n            <NonBinary/>\n\n            <div id='lookingfor-field'>\n                <label>Looking For:</label>\n                    <input type = 'checkbox'  id = 'study-buddy-c' name = 'studdy-buddy' value = '0' onClick = { (e) => setSignUpFields({...signUpFields,studyBuddy:!signUpFields.studyBuddy})}/>\n                    <input type = 'checkbox'  id = 'friend-c' name = 'friend' value = '1' onClick = { (e) => setSignUpFields({...signUpFields,friend:!signUpFields.friend})}/>\n                    <input type = 'checkbox'  id = 'sex-c' name = 'sex' value = '2' onClick = { (e) => setSignUpFields({...signUpFields,sex:!signUpFields.sex})}/>\n                    <label id= 'study-buddy-l'>Studdy <br/>Buddy</label>\n                    <label id= 'friend-l'>Friend</label>\n                    <label id= 'sex-l'>Friend ;)</label>\n            </div>\n\n            <div id='bio-field'>\n                <label>Bio</label>\n                <textarea maxLength = '256' placeholder = 'tell your classmates something about yourself ;)' value={signUpFields.bio} onChange = { (e) => setSignUpFields({...signUpFields,bio:e.target.value})}/>\n            </div>\n\n            <div id='submit-field'>\n                <button type = 'submit' onClick = { handleSignUp }> Sign Up </button>\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default SignUp;\n","/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/aws-exports.js",[],"/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/graphql/queries.js",[],"/home/alex/github/Course_Connect/Course-Connect/terp_connect/src/graphql/mutations.js",[],{"ruleId":"166","severity":1,"message":"167","line":4,"column":8,"nodeType":"168","messageId":"169","endLine":4,"endColumn":23},{"ruleId":"166","severity":1,"message":"170","line":5,"column":8,"nodeType":"168","messageId":"169","endLine":5,"endColumn":16},{"ruleId":"166","severity":1,"message":"171","line":7,"column":8,"nodeType":"168","messageId":"169","endLine":7,"endColumn":22},{"ruleId":"166","severity":1,"message":"172","line":8,"column":35,"nodeType":"168","messageId":"169","endLine":8,"endColumn":41},{"ruleId":"166","severity":1,"message":"173","line":8,"column":43,"nodeType":"168","messageId":"169","endLine":8,"endColumn":48},{"ruleId":"166","severity":1,"message":"174","line":8,"column":50,"nodeType":"168","messageId":"169","endLine":8,"endColumn":58},{"ruleId":"166","severity":1,"message":"175","line":8,"column":60,"nodeType":"168","messageId":"169","endLine":8,"endColumn":70},{"ruleId":"166","severity":1,"message":"176","line":9,"column":8,"nodeType":"168","messageId":"169","endLine":9,"endColumn":29},{"ruleId":"166","severity":1,"message":"177","line":10,"column":8,"nodeType":"168","messageId":"169","endLine":10,"endColumn":24},{"ruleId":"166","severity":1,"message":"178","line":11,"column":8,"nodeType":"168","messageId":"169","endLine":11,"endColumn":16},{"ruleId":"166","severity":1,"message":"179","line":12,"column":19,"nodeType":"168","messageId":"169","endLine":12,"endColumn":23},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"166","severity":1,"message":"184","line":1,"column":27,"nodeType":"168","messageId":"169","endLine":1,"endColumn":35},{"ruleId":"166","severity":1,"message":"185","line":3,"column":15,"nodeType":"168","messageId":"169","endLine":3,"endColumn":18},{"ruleId":"166","severity":1,"message":"186","line":3,"column":20,"nodeType":"168","messageId":"169","endLine":3,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":11,"column":8,"nodeType":"189","endLine":11,"endColumn":10,"suggestions":"190"},{"ruleId":"166","severity":1,"message":"191","line":2,"column":27,"nodeType":"168","messageId":"169","endLine":2,"endColumn":33},{"ruleId":"166","severity":1,"message":"192","line":1,"column":19,"nodeType":"168","messageId":"169","endLine":1,"endColumn":28},{"ruleId":"166","severity":1,"message":"193","line":1,"column":30,"nodeType":"168","messageId":"169","endLine":1,"endColumn":36},{"ruleId":"166","severity":1,"message":"194","line":1,"column":38,"nodeType":"168","messageId":"169","endLine":1,"endColumn":57},{"ruleId":"166","severity":1,"message":"179","line":3,"column":10,"nodeType":"168","messageId":"169","endLine":3,"endColumn":14},{"ruleId":"166","severity":1,"message":"195","line":10,"column":12,"nodeType":"168","messageId":"169","endLine":10,"endColumn":24},{"ruleId":"166","severity":1,"message":"196","line":10,"column":26,"nodeType":"168","messageId":"169","endLine":10,"endColumn":41},{"ruleId":"166","severity":1,"message":"197","line":11,"column":12,"nodeType":"168","messageId":"169","endLine":11,"endColumn":20},{"ruleId":"166","severity":1,"message":"198","line":11,"column":22,"nodeType":"168","messageId":"169","endLine":11,"endColumn":33},{"ruleId":"166","severity":1,"message":"199","line":12,"column":12,"nodeType":"168","messageId":"169","endLine":12,"endColumn":23},{"ruleId":"166","severity":1,"message":"200","line":12,"column":25,"nodeType":"168","messageId":"169","endLine":12,"endColumn":39},{"ruleId":"166","severity":1,"message":"191","line":2,"column":27,"nodeType":"168","messageId":"169","endLine":2,"endColumn":33},{"ruleId":"166","severity":1,"message":"172","line":2,"column":35,"nodeType":"168","messageId":"169","endLine":2,"endColumn":41},{"ruleId":"166","severity":1,"message":"173","line":2,"column":43,"nodeType":"168","messageId":"169","endLine":2,"endColumn":48},{"ruleId":"166","severity":1,"message":"174","line":2,"column":50,"nodeType":"168","messageId":"169","endLine":2,"endColumn":58},{"ruleId":"166","severity":1,"message":"175","line":2,"column":60,"nodeType":"168","messageId":"169","endLine":2,"endColumn":70},{"ruleId":"187","severity":1,"message":"188","line":12,"column":8,"nodeType":"189","endLine":12,"endColumn":10,"suggestions":"201"},{"ruleId":"166","severity":1,"message":"202","line":27,"column":11,"nodeType":"168","messageId":"169","endLine":27,"endColumn":21},{"ruleId":"203","severity":1,"message":"204","line":51,"column":67,"nodeType":"205","messageId":"206","endLine":51,"endColumn":69},{"ruleId":"203","severity":1,"message":"204","line":54,"column":66,"nodeType":"205","messageId":"206","endLine":54,"endColumn":68},{"ruleId":"203","severity":1,"message":"204","line":57,"column":67,"nodeType":"205","messageId":"206","endLine":57,"endColumn":69},{"ruleId":"166","severity":1,"message":"207","line":8,"column":25,"nodeType":"168","messageId":"169","endLine":8,"endColumn":39},{"ruleId":"203","severity":1,"message":"204","line":31,"column":43,"nodeType":"205","messageId":"206","endLine":31,"endColumn":45},{"ruleId":"203","severity":1,"message":"204","line":52,"column":40,"nodeType":"205","messageId":"206","endLine":52,"endColumn":42},{"ruleId":"208","severity":1,"message":"209","line":79,"column":51,"nodeType":"210","endLine":79,"endColumn":126},{"ruleId":"208","severity":1,"message":"209","line":80,"column":22,"nodeType":"210","endLine":80,"endColumn":105},{"ruleId":"208","severity":1,"message":"209","line":81,"column":33,"nodeType":"210","endLine":81,"endColumn":134},{"ruleId":"187","severity":1,"message":"211","line":130,"column":15,"nodeType":"212","endLine":139,"endColumn":6},{"ruleId":"203","severity":1,"message":"204","line":136,"column":17,"nodeType":"205","messageId":"206","endLine":136,"endColumn":19},{"ruleId":"187","severity":1,"message":"213","line":139,"column":7,"nodeType":"189","endLine":139,"endColumn":27,"suggestions":"214"},{"ruleId":"166","severity":1,"message":"215","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":14},{"ruleId":"166","severity":1,"message":"216","line":7,"column":8,"nodeType":"168","messageId":"169","endLine":7,"endColumn":14},{"ruleId":"166","severity":1,"message":"191","line":8,"column":27,"nodeType":"168","messageId":"169","endLine":8,"endColumn":33},{"ruleId":"166","severity":1,"message":"172","line":8,"column":35,"nodeType":"168","messageId":"169","endLine":8,"endColumn":41},{"ruleId":"166","severity":1,"message":"173","line":8,"column":43,"nodeType":"168","messageId":"169","endLine":8,"endColumn":48},{"ruleId":"166","severity":1,"message":"174","line":8,"column":50,"nodeType":"168","messageId":"169","endLine":8,"endColumn":58},{"ruleId":"166","severity":1,"message":"175","line":8,"column":60,"nodeType":"168","messageId":"169","endLine":8,"endColumn":70},{"ruleId":"203","severity":1,"message":"204","line":55,"column":20,"nodeType":"205","messageId":"206","endLine":55,"endColumn":22},{"ruleId":"203","severity":1,"message":"204","line":99,"column":16,"nodeType":"205","messageId":"206","endLine":99,"endColumn":18},{"ruleId":"203","severity":1,"message":"204","line":99,"column":30,"nodeType":"205","messageId":"206","endLine":99,"endColumn":32},{"ruleId":"203","severity":1,"message":"204","line":99,"column":45,"nodeType":"205","messageId":"206","endLine":99,"endColumn":47},{"ruleId":"203","severity":1,"message":"204","line":99,"column":63,"nodeType":"205","messageId":"206","endLine":99,"endColumn":65},{"ruleId":"203","severity":1,"message":"204","line":99,"column":88,"nodeType":"205","messageId":"206","endLine":99,"endColumn":90},{"ruleId":"203","severity":1,"message":"204","line":99,"column":177,"nodeType":"205","messageId":"206","endLine":99,"endColumn":179},{"ruleId":"203","severity":1,"message":"204","line":115,"column":17,"nodeType":"205","messageId":"206","endLine":115,"endColumn":19},{"ruleId":"166","severity":1,"message":"217","line":200,"column":15,"nodeType":"168","messageId":"169","endLine":200,"endColumn":17},{"ruleId":"166","severity":1,"message":"218","line":201,"column":15,"nodeType":"168","messageId":"169","endLine":201,"endColumn":23},{"ruleId":"166","severity":1,"message":"219","line":207,"column":11,"nodeType":"168","messageId":"169","endLine":207,"endColumn":28},{"ruleId":"166","severity":1,"message":"220","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":22},{"ruleId":"166","severity":1,"message":"221","line":3,"column":8,"nodeType":"168","messageId":"169","endLine":3,"endColumn":16},{"ruleId":"187","severity":1,"message":"188","line":30,"column":8,"nodeType":"189","endLine":30,"endColumn":10,"suggestions":"222"},{"ruleId":"166","severity":1,"message":"223","line":64,"column":15,"nodeType":"168","messageId":"169","endLine":64,"endColumn":20},{"ruleId":"166","severity":1,"message":"224","line":134,"column":11,"nodeType":"168","messageId":"169","endLine":134,"endColumn":25},{"ruleId":"166","severity":1,"message":"192","line":1,"column":18,"nodeType":"168","messageId":"169","endLine":1,"endColumn":27},{"ruleId":"166","severity":1,"message":"215","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":14},{"ruleId":"166","severity":1,"message":"216","line":5,"column":8,"nodeType":"168","messageId":"169","endLine":5,"endColumn":14},{"ruleId":"166","severity":1,"message":"191","line":6,"column":27,"nodeType":"168","messageId":"169","endLine":6,"endColumn":33},{"ruleId":"166","severity":1,"message":"172","line":6,"column":35,"nodeType":"168","messageId":"169","endLine":6,"endColumn":41},{"ruleId":"166","severity":1,"message":"173","line":6,"column":43,"nodeType":"168","messageId":"169","endLine":6,"endColumn":48},{"ruleId":"166","severity":1,"message":"174","line":6,"column":50,"nodeType":"168","messageId":"169","endLine":6,"endColumn":58},{"ruleId":"166","severity":1,"message":"175","line":6,"column":60,"nodeType":"168","messageId":"169","endLine":6,"endColumn":70},{"ruleId":"203","severity":1,"message":"204","line":42,"column":18,"nodeType":"205","messageId":"206","endLine":42,"endColumn":20},{"ruleId":"203","severity":1,"message":"204","line":42,"column":36,"nodeType":"205","messageId":"206","endLine":42,"endColumn":38},{"ruleId":"166","severity":1,"message":"225","line":54,"column":17,"nodeType":"168","messageId":"169","endLine":54,"endColumn":27},{"ruleId":"166","severity":1,"message":"217","line":93,"column":15,"nodeType":"168","messageId":"169","endLine":93,"endColumn":17},{"ruleId":"166","severity":1,"message":"218","line":94,"column":15,"nodeType":"168","messageId":"169","endLine":94,"endColumn":23},{"ruleId":"166","severity":1,"message":"219","line":101,"column":11,"nodeType":"168","messageId":"169","endLine":101,"endColumn":28},{"ruleId":"166","severity":1,"message":"192","line":1,"column":27,"nodeType":"168","messageId":"169","endLine":1,"endColumn":36},{"ruleId":"166","severity":1,"message":"226","line":3,"column":8,"nodeType":"168","messageId":"169","endLine":3,"endColumn":13},{"ruleId":"166","severity":1,"message":"227","line":6,"column":22,"nodeType":"168","messageId":"169","endLine":6,"endColumn":34},{"ruleId":"166","severity":1,"message":"228","line":7,"column":24,"nodeType":"168","messageId":"169","endLine":7,"endColumn":38},{"ruleId":"166","severity":1,"message":"226","line":3,"column":8,"nodeType":"168","messageId":"169","endLine":3,"endColumn":13},{"ruleId":"166","severity":1,"message":"229","line":14,"column":12,"nodeType":"168","messageId":"169","endLine":14,"endColumn":29},{"ruleId":"166","severity":1,"message":"230","line":14,"column":31,"nodeType":"168","messageId":"169","endLine":14,"endColumn":51},"no-unused-vars","'NewSignUpSignIn' is defined but never used.","Identifier","unusedVar","'MainPage' is defined but never used.","'CourseSelector' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'useHistory' is defined but never used.","'SignUpComponentMobile' is defined but never used.","'VerificationPage' is defined but never used.","'HomePage' is defined but never used.","'Auth' is defined but never used.","no-native-reassign",["231"],"no-negated-in-lhs",["232"],"'useState' is defined but never used.","'API' is defined but never used.","'graphqlOperation' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkUser'. Either include it or remove the dependency array.","ArrayExpression",["233"],"'Router' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useImperativeHandle' is defined but never used.","'needsConfirm' is assigned a value but never used.","'setNeedsConfirm' is assigned a value but never used.","'authCode' is assigned a value but never used.","'setAuthCode' is assigned a value but never used.","'backUpEmail' is assigned a value but never used.","'setBackUpEmail' is assigned a value but never used.",["234"],"'createUser' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setCurrentUser' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'loadTexts'. Either include it or remove the dependency array.",["235"],"'SignIn' is defined but never used.","'SignUp' is defined but never used.","'id' is assigned a value but never used.","'passHash' is assigned a value but never used.","'createRequestJSON' is assigned a value but never used.","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.",["236"],"'index' is assigned a value but never used.","'ResetProfessor' is assigned a value but never used.","'submitPass' is assigned a value but never used.","'axios' is defined but never used.","'setTitleText' is assigned a value but never used.","'setDescripText' is assigned a value but never used.","'signUpFailMessage' is assigned a value but never used.","'setSignUpFailMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"237","fix":"238"},{"desc":"237","fix":"239"},{"desc":"240","fix":"241"},{"desc":"237","fix":"242"},"Update the dependencies array to be: [checkUser]",{"range":"243","text":"244"},{"range":"245","text":"244"},"Update the dependencies array to be: [rerun, currentConvo, loadTexts]",{"range":"246","text":"247"},{"range":"248","text":"244"},[215,217],"[checkUser]",[423,425],[4409,4429],"[rerun, currentConvo, loadTexts]",[847,849]]